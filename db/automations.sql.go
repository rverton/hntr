// Code generated by sqlc. DO NOT EDIT.
// source: automations.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAutomation = `-- name: GetAutomation :one
SELECT id, name, box_id, command, source_table, source_tags, destination_table, destination_tags, created_at FROM automations WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAutomation(ctx context.Context, id uuid.UUID) (Automation, error) {
	row := q.db.QueryRowContext(ctx, getAutomation, id)
	var i Automation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoxID,
		&i.Command,
		&i.SourceTable,
		pq.Array(&i.SourceTags),
		&i.DestinationTable,
		pq.Array(&i.DestinationTags),
		&i.CreatedAt,
	)
	return i, err
}

const listAutomations = `-- name: ListAutomations :many
SELECT id, name, box_id, command, source_table, source_tags, destination_table, destination_tags, created_at FROM automations WHERE box_id = $1
`

func (q *Queries) ListAutomations(ctx context.Context, boxID uuid.UUID) ([]Automation, error) {
	rows, err := q.db.QueryContext(ctx, listAutomations, boxID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Automation{}
	for rows.Next() {
		var i Automation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BoxID,
			&i.Command,
			&i.SourceTable,
			pq.Array(&i.SourceTags),
			&i.DestinationTable,
			pq.Array(&i.DestinationTags),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
